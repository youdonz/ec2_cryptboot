upstream rack_app {
  server localhost:3000;
}

server {
    listen 80;

    client_max_body_size 50M;

    root /var/www/rack_site;

    # this rewrites all the requests to the maintenance.html (but allows css and images for nicer looking maintenance pages)
    # page if it exists in the doc root. This is for capistrano's disable web task.

    set $maintenance 0;
    if (-f $document_root/system/maintenance/index.html) {
        set $maintenance 1;
    }
    if ($request_uri ~* (jpg|jpeg|gif|png|js|css)$) {
        set $maintenance 0;
    }
    if ($maintenance) {
        rewrite  ^(.*)$  /system/maintenance/index.html last;
        break;
    }

    location / {
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $http_host;
        proxy_redirect off;
        proxy_max_temp_file_size 0;

        # check for index.html for directory index
        # if its there on the filesystem then rewite 
        # the url to add /index.html to the end of it
        # and then break to send it to the next config rules.
        if (-f $request_filename/index.html) {
          rewrite (.*) $1/index.html break;
        }

        # this is the meat of the rails page caching config
        # it adds .html to the end of the url and then checks
        # the filesystem for that file. If it exists, then we
        # rewite the url to have explicit .html on the end 
        # and then send it on its way to the next config rule.
        # if there is no file on the fs then it sets all the 
        # necessary headers and proxies to our upstream mongrels
        if (-f $request_filename.html) {
          rewrite (.*) $1.html break;
        }

        if (!-f $request_filename) {
          proxy_pass  http://rack_app;
          break;
        }
    }

    location /images {
      root /var/www/rack_site;
    }
}
